#ifndef PRODUCTS_H
#define PRODUCTS_H
#include <limits>
class AbstractMalware {  // Product (abstract) Malware
public:
   AbstractMalware(const std::string &category):m_category(category) {}
   virtual ~AbstractMalware() {}
   virtual int getFrequency() = 0; // pure virtual method
   virtual const std::string &getCategory(){return m_category;}
private:
   std::string m_category;
};

class WindowsMalware : public AbstractMalware { // Concrete Malware for windows platform
public:
    WindowsMalware():AbstractMalware("Ransomware"){}
    int getFrequency() override {
        return std::numeric_limits<int>::max();
    }
};

class MacMalware : public AbstractMalware { // Concrete Product Malware for mac platform
public:
    MacMalware():AbstractMalware("Trojen"){}
    int getFrequency() override {
        return 1;
    }
};

#endif // PRODUCTS_H
